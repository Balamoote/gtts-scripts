# Правила для всех форм слова 'замок'
# let @a=1|%s/"Z\zs\d\+\ze"/\=''.(@a+setreg('a',@a+1))/g|%s/ Z\[\zs\d\+\ze\]++; if(dbg){print "Z\(\d\+\)"/\1/g
#  x4707 castle_    lock_   замок  за́мок  замо́к
#  замка  замкам  замками  замках  замке  замки  замков  замком  замку  замок

function ZAMOK_F() { # <<< правила находятся в файле zamok.awk

for(wrd in omap["x4707"]){omakevars(x4707,"x4707");for(y=1;y<=wln;y++)         # header1
{makebookvars();for(i in wpos){makewposvars();if(tolower(l[i])!=iwrd)continue; # header2

 ### замок замки им.п. вин.п.
 if(iwrd=="замок" || iwrd=="замки") {
 #
    cst="вешать";
    if ( base(-4,cst) &&
          w(-3,"на") &&
           q(-2,"prl_edvi prl_mnvi prq_edvi prq_mnvi") &&
            q(-1,"suw_edvi suw_mnvi") && s(-4,-1) )
    { l[i]=omo2; Z[1]++; if(dbg){print "Z1"}; continue };

    cst1="взять брать";
    cst2="локоть голова лодыжка нога рука шея";
    if ( bb(-5,-3,cst2) && s(bbn,-3) &&
	 base(-2,cst1) &&
           w(-1,"в") && s(-2,-1) )
    { l[i]=omo2; Z[2]++; if(dbg){print "Z2"}; continue };
    if ( base(-2,cst1) &&
          w(-1,"в") &&
           bf(1,3,cst2) && s(-2,bfn-1) )
    { l[i]=omo2; Z[3]++; if(dbg){print "Z3"}; continue };

    cst="ворота вход дорога калитка тропинка ход";
    if ( base(-2,cst) &&
          w(-1,"в") && s(-2,-1) )
    { l[i]=omo1; Z[4]++; if(dbg){print "Z4"}; continue };

    cst="закрывать закрыть";
    if ( w(1,"для") &&
          q(2,"mest_ro suw_edro suw_mnro") &&
           bf(1,3,cst) && s(0,bfn-1) )
    { l[i]=omo1; Z[5]++; if(dbg){print "Z5"}; continue };
    if ( bf(1,3,cst) &&
           w(bfn+1,"для") && s(0,bfn) )
    { l[i]=omo1; Z[6]++; if(dbg){print "Z6"}; continue };

    cst="быть стать явиться являться";
    if ( bf(1,3,cst) &&
          q(bfn+1,"suw_edtv suw_mntv") &&
            w(bfn+2,"для к") && s(0,bfn+1) )
    { l[i]=omo1; Z[7]++; if(dbg){print "Z7"}; continue };

    cst="вделать вмонтировать вставить вставлять выставить выставлять выстрелить демонтировать замкнуть захватить захватывать ключ монтировать нащупать нащупывать отмычка переплести переплетать постукивать постучать разжать разжимать сжать сжаться сжимать сжиматься складывать сложить смотреть смыкаться сомкнуть сомкнуться сплести сплестись сплетать стискивать стиснуть стрелять сцепить сцепливать сцеплять ткнуть тыкать сцепиться сложить складывать";
    if ( base(-2,cst) &&
           w(-1,"в") && s(-2,-1) )
    { l[i]=omo2; Z[8]++; if(dbg){print "Z8"}; continue };
    if ( base(-3,cst) &&
          w(-2,"в") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo2; Z[9]++; if(dbg){print "Z9"}; continue };
    if ( base(-4,cst) &&
          q(-3,"suw_edvi suw_mnvi") &&
           q(-2,"suw_edro suw_mnro mest_vi mest_3e") &&
            w(-1,"в") && s(-3,-1) )
    { l[i]=omo2; Z[10]++; if(dbg){print "Z10"}; continue };
    if ( base(-4,cst) &&
          q(-3,"prl_edvi prl_mnvi mest_vi mest_3e") &&
           q(-2,"suw_edvi suw_mnvi") &&
            w(-1,"в") && s(-3,-1) )
    { l[i]=omo2; Z[11]++; if(dbg){print "Z11"}; continue };
    if ( base(-3,cst) &&
          q(-2,"suw_edvi suw_mnvi mest_vi mest_3e prl_kred_sr") &&
           w(-1,"в") && s(-3,-1) )
    { l[i]=omo2; Z[12]++; if(dbg){print "Z12"}; continue };
    if ( base(-7,cst) &&
          q(-6,"suw_edvi suw_mnvi") &&
           q(-5,"prq_edro prq_mnro") &&
            pre_pr(-4) &&
             q(-3,"suw_edpr suw_mnpr") &&
              q(-2,"suw_edro suw_mnro") &&
               w(-1,"в") && s(-7,-1) )
    { l[i]=omo2; Z[13]++; if(dbg){print "Z13"}; continue };
    if ( w(-1,"в") &&
          bf(1,3,cst) && s(-1,bfn-1) )
    { l[i]=omo2; Z[14]++; if(dbg){print "Z14"}; continue };

    cst="блок вешать ворота закрывать закрываться закрыть закрыться замкнуть запереть запереться запирать запираться застегнуть застёгивать захлопнуть захлопнуться захлопывать захлопываться защёлкнуть защёлкнуться кандалы навесить наручники нащупать нащупывать перейти переходить посадить рот роток садить сажать холодильник дверь";
    if ( base(-2,cst) &&
          w(-1,"на") && s(-2,-1) )
    { l[i]=omo2; Z[15]++; if(dbg){print "Z15"}; continue };
    if ( base(-3,cst) &&
          q(-2,"suw_edvi suw_mnvi") &&
           w(-1,"на") && s(-3,-1) )
    { l[i]=omo2; Z[16]++; if(dbg){print "Z16"}; continue };
    if ( base(-4,cst) &&
          q(-3,"prl_edvi prl_mnvi mest_vi mest_3e") &&
           q(-2,"suw_edvi suw_mnvi") &&
            w(-1,"на") && s(-4,-1) )
    { l[i]=omo2; Z[16]++; if(dbg){print "Z16"}; continue };
    if ( base(-5,cst) &&
          q(-4,"prl_edvi prl_mnvi mest_vi mest_3e") &&
           q(-3,"prl_edvi prl_mnvi mest_vi") &&
            q(-2,"suw_edvi suw_mnvi") &&
             w(-1,"на") && s(-5,-1) )
    { l[i]=omo2; Z[16]++; if(dbg){print "Z16"}; continue };
    if ( base(-3,cst) &&
          w(-2,"на") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo2; Z[17]++; if(dbg){print "Z17"}; continue };
    if ( w(-1,"на") &&
          bf(1,3,cst) && s(-1,bfn-1) )
    { l[i]=omo2; Z[18]++; if(dbg){print "Z18"}; continue };
    if ( base(-5,cst) &&
	  pre_tv(-4) &&
           q(-3,"mest_tv suw_edtv suw_mntv") &&
            q(-2,"mest_vi suw_edvi suw_mnvi mest_3e") &&
             w(-1,"на") && s(-5,-1) )
    { l[i]=omo2; Z[16]++; if(dbg){print "Z16"}; continue };

    cst="нападать нападение напасть";
    if ( base(-2,cst) &&
          w(-1,"на") && s(-2,-1) )
    { l[i]=omo1; Z[19]++; if(dbg){print "Z19"}; continue };
    if ( base(-3,cst) &&
          w(-2,"на") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo1; Z[20]++; if(dbg){print "Z20"}; continue };
    if ( w(-1,"на") &&
          bf(1,3,cst) && s(-1,bfn-1) )
    { l[i]=omo1; Z[21]++; if(dbg){print "Z21"}; continue };

    if ( qxs(-1,"на","весь") )
    { l[i]=omo1; Z[22]++; if(dbg){print "Z22"}; continue };

    cst="подкоп";
    if ( base(-2,cst) &&
          w(-1,"под") && s(-2,-1) )
    { l[i]=omo1; Z[23]++; if(dbg){print "Z23"}; continue };
    if ( base(-3,cst) &&
          w(-2,"под") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo1; Z[24]++; if(dbg){print "Z24"}; continue };
    if ( w(-1,"под") &&
          bf(1,3,cst) && s(-1,bfn-1) )
    { l[i]=omo1; Z[25]++; if(dbg){print "Z25"}; continue };

    cst="вешать закрывать закрываться закрыть закрыться замкнуть замыкать запереть запереться запирать запираться застегнуть застёгивать захлопнуть захлопнуться захлопывать захлопываться защёлкнуть защёлкнуться ключ навесить нащупать нащупывать отмычка положить посадить садить сплести сплетать сцепить сцеплять упрятать упрятывать спрятать прятать";
    if ( base(-2,cst) &&
          w(-1,"под") && s(-2,-1) )
    { l[i]=omo2; Z[26]++; if(dbg){print "Z26"}; continue };
    if ( base(-3,cst) &&
          q(-2,"suw_edvi suw_mnvi mest_vi mest_3e") &&
           w(-1,"под") && s(-3,-1) )
    { l[i]=omo2; Z[27]++; if(dbg){print "Z27"}; continue };
    if ( base(-3,cst) &&
          w(-2,"под") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo2; Z[28]++; if(dbg){print "Z28"}; continue };
    if ( w(-1,"под") &&
          bf(1,3,cst) && s(-1,bfn-1) )
    { l[i]=omo2; Z[29]++; if(dbg){print "Z29"}; continue };

    cst="приидти прийти приходить";
    if ( base(-2,cst) &&
           w(-1,"под") && s(-2,-1) )
    { l[i]=omo1; Z[30]++; if(dbg){print "Z30"}; continue };
    if ( base(-3,cst) &&
          w(-2,"под") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo1; Z[31]++; if(dbg){print "Z31"}; continue };
    if ( w(-1,"под") &&
          bf(1,3,cst) && s(-1,bfn-1) )
    { l[i]=omo1; Z[32]++; if(dbg){print "Z32"}; continue };
    if ( base(-4,cst) &&
          q(-3,"pre_da") &&
           q(-2,"mest_da suw_edda suw_mnda") &&
            w(-1,"под") && s(-4,-1) )
    { l[i]=omo1; Z[33]++; if(dbg){print "Z33"}; continue };
    if ( base(-6,cst) &&
	  q(-5,"suw_edvi suw_mnvi mest_vi mest_3e") &&
	   q(-4,"nar_napr nar_spos") &&
            q(-3,"pre_da") &&
             q(-2,"mest_da suw_edda suw_mnda") &&
              w(-1,"под") && s(-4,-1) )
    { l[i]=omo1; Z[34]++; if(dbg){print "Z34"}; continue };
    if ( base(-4,cst) &&
          q(-3,"pre_tv") &&
           q(-2,"mest_tv suw_edtv suw_mntv") &&
            w(-1,"под") && s(-4,-1) )
    { l[i]=omo1; Z[35]++; if(dbg){print "Z35"}; continue };

    cst="бежать брать бросать бросить броситься везти вернуть вернуться вести взять влетать влететь вливаться вломиться возвратить возвратиться возвращать возвращаться войти ворваться впускать впустить врываться входить въезжать въехать вырваться гнать двигаться двинуться доставить доставлять ехать забирать забрать забраться забредать забрести завести заглянуть заезжать заехать зайти заключить закрывать закрыть залезть заманивать заманить засадить заходить зачастить заявиться идти лазить лезть лететь наезжать направить направиться направляться опаздывать опоздать отвести отводить отогнать отправить отправиться отправлять отправляться отпускать отступать отступить перенести переселиться повести подниматься поехать пойти полететь поместить попадать попасть посадить послать поспешить посылать поторопиться потянуть прибежать прибывать прибыть привести приволочь пригласить приглашать приезжать приехать приидти прийти принести приносить притащить приходить пробраться провести проводить пройти прокрасться пролезть проникать проникнуть пропускать пропустить прорваться прорываться проходить пускать пустить развалить сбежать свозить сжать сжимать скакать скрестить скрещивать слать смотаться собираться спешить спускаться спуститься торопиться тянуть увести уводить удалиться удерживать уезжать уехать уйти ускакать утаскивать утащить ходить явиться увезти шмыгнуть шмыгать убежать убегать унести уносить";
    cst1="ключ отмычка сверло";
    if ( bb(-6,-3,cst1) && s(bbn,-3) &&
          base(-2,cst) &&
           w(-1,"в") && s(-2,-1) )
    { l[i]=omo2; Z[36]++; if(dbg){print "Z36"}; continue };
    if ( base(-2,cst) &&
           w(-1,"в") && s(-2,-1) )
    { l[i]=omo1; Z[37]++; if(dbg){print "Z37"}; continue };
    if ( base(-3,cst) &&
          w(-2,"в") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo1; Z[38]++; if(dbg){print "Z38"}; continue };
    if ( base(-4,cst) &&
          q(-3,"prl_edvi prl_mnvi mest_vi mest_3e") &&
           q(-2,"suw_edvi suw_mnvi") &&
            w(-1,"в") && s(-3,-1) )
    { l[i]=omo1; Z[39]++; if(dbg){print "Z39"}; continue };
    if ( base(-3,cst) &&
          q(-2,"suw_edvi suw_mnvi mest_vi mest_3e gl_in prl_kred_sr nar_vrem qast") &&
           w(-1,"в") && s(-3,-1) )
    { l[i]=omo1; Z[40]++; if(dbg){print "Z40"}; continue };
    if ( base(-4,cst) &&
          q(-3,"suw_edvi suw_mnvi mest_vi mest_3e gl_in prl_kred_sr nar_vrem qast") &&
           w(-2,"в") &&
            q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-4,-1) )
    { l[i]=omo1; Z[40]++; if(dbg){print "Z40"}; continue };
    if ( w(-1,"в") &&
          bf(1,3,cst) && s(-1,bfn-1) )
    { l[i]=omo1; Z[41]++; if(dbg){print "Z41"}; continue };
    if ( w(-2,"в") &&
          q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") &&
           bf(1,3,cst) && s(-2,bfn-1) )
    { l[i]=omo1; Z[42]++; if(dbg){print "Z42"}; continue };
    if ( base(-4,cst) &&
          q(-3,"pre_da") &&
           q(-2,"mest_da suw_edda suw_mnda") &&
            w(-1,"в") && s(-4,-1) )
    { l[i]=omo1; Z[43]++; if(dbg){print "Z43"}; continue };
    if ( base(-6,cst) &&
	  q(-5,"suw_edvi suw_mnvi mest_vi mest_3e") &&
	   q(-4,"nar_napr nar_spos") &&
            q(-3,"pre_da") &&
             q(-2,"mest_da suw_edda suw_mnda") &&
              w(-1,"в") && s(-4,-1) )
    { l[i]=omo1; Z[44]++; if(dbg){print "Z44"}; continue };
    if ( base(-4,cst) &&
          q(-3,"pre_tv") &&
           q(-2,"mest_tv suw_edtv suw_mntv") &&
            w(-1,"в") && s(-4,-1) )
    { l[i]=omo1; Z[45]++; if(dbg){print "Z45"}; continue };

    cst="бегство визит возвращение ворота вход дверь дорога заключение заточение переезд переход поездка прибытие приезд проникновение путь тропа";
    if ( base(-2,cst) &&
          w(-1,"в") && s(-2,-1) )
    { l[i]=omo1; Z[46]++; if(dbg){print "Z46"}; continue };
    if ( base(-3,cst) &&
          q(-2,"suw_edro suw_mnro mest_ro mest_3e qast") &&
           w(-1,"в") && s(-3,-1) )
    { l[i]=omo1; Z[47]++; if(dbg){print "Z47"}; continue };
    if ( base(-3,cst) &&
          w(-2,"в") &&
           q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
    { l[i]=omo1; Z[48]++; if(dbg){print "Z48"}; continue };


    cst1="сменить поменять";
    cst2="владелец имя название хозяин";
    if ( bf(1,5,cst1) && Qf(1,bfn-1,"souz_iili pre_any") &&
          bf(bfn+1,bfn+3,cst2) && s(0,bfn-1) )
    { l[i]=omo1; Z[49]++; if(dbg){print "Z49"}; continue };

    cst1="вырубать вырезать вырубить высекать высечь";
    cst2="скала гора камень";
    if ( bf(1,5,cst1) && Qf(1,bfn-1,"souz_iili pre_any") &&
          w(bfn+1,"в из") &&
           bf(bfn+2,bfn+4,cst2) && s(0,bfn-1) )
    { l[i]=omo1; Z[50]++; if(dbg){print "Z50"}; continue };

    cst1="взять брать";
    cst2="скрепить";
    if ( base(-1,cst1) &&
         (w(1,"и")||sc(0,",")) &&
           bf(2,4,cst2) &&
            q(bfn+1,"mest_tv suw_edtv suw_mntv") && s(0,bfn-1) )
    { l[i]=omo2; Z[51]++; if(dbg){print "Z51"}; continue };

    cst1="держать";
    cst2="закрыть запереть открыть";
    if ( base(-2,cst1) &&
          base(-1,cst2) &&
           q(1,"isname") && s(-2,0) )
    { l[i]=omo1; Z[52]++; if(dbg){print "Z52"}; continue };

    cst="замка замков";
    if ( w(-3,"из") &&
          w(-2,cst) &&
           w(-1,"в") && s(-3,-1) )
    { l[i]=omo2; Z[53]++; if(dbg){print "Z53"}; continue };

    if ( w(-3,"в") &&
          q(-2,"suw_edvi suw_mnvi") &&
           w(-1,"под") && s(-3,-1) )
    { l[i]=omo2; Z[54]++; if(dbg){print "Z54"}; continue };
    if ( w(-1,"под") &&
          w(1,"в") &&
           q(2,"suw_edvi suw_mnvi") && s(-1,1) )
    { l[i]=omo2; Z[55]++; if(dbg){print "Z55"}; continue };

    cst="передавать передать получить принять";
    if ( ( qxs(-1,"в","дар подарок наследство собственность")||
           qxs(-1,"во","владение")||
           qxs(-1,"в","своё свои","владение владения")||
           qxs(-1,"под","управление")||
           qxs(-1,"под","своё","управление") ) && bb(xsn-4,xsn-1,cst) && s(bbn,xsn-1) )
    { l[i]=omo1; Z[56]++; if(dbg){print "Z56"}; continue };


 }; # замок замки

 ### ALL
 if ( wc(-1,"этажн[оы]") && s(-1) )
 { l[i]=omo1; Z[57]++; if(dbg){print "Z57"}; continue };

 if ( wc(-1,"штифтов[оы]") && s(-1) )
 { l[i]=omo2; Z[58]++; if(dbg){print "Z58"}; continue };


 ##
 cst="баронов баронский белоснежный береговой близкий блистающий вампирский величественный викторианский виндзорский военный воздушный восточный вражеский высокий высоченный герцогский гордый городской гостеприимный готический графский грозный далёкий древний епископский живописный жуткий загадочный заколдованный заоблачный западный захудалый земляной знаменитый императорский исполинский каменный карточный клановый княжеский королевский легендарный ледяной летучий людоедский меблированный мрачный мёртвый настоящий недостроенный непокорённый неприступный обветшалый облачный орденский охотничий песочный песчаный пограничный полоцкий правительственный приграничный приземистый просторный разбоничий родительский родовой роскошный рыцарский северный сказочный средневековый старинный угрюмый фамильный феодальный хрустальный царский чудный южный коронный";
 if ( base(-1,cst) && s(-1)  )
 { l[i]=omo1; Z[59]++; if(dbg){print "Z59"}; continue };
 if ( base(-2,cst) &&
       Q(-1,"suw_any") && s(-2,-1)  )
 { l[i]=omo1; Z[60]++; if(dbg){print "Z60"}; continue };
 if ( base(1,cst) && s(0) )
 { l[i]=omo1; Z[61]++; if(dbg){print "Z61"}; continue };
 if ( base(1,"быть стать являться") &&
       bf(2,5,cst) && s(0,bfn-1) )
 { l[i]=omo1; Z[62]++; if(dbg){print "Z62"}; continue };

 cst="автоматический амбарный битумный булатный вакуумный висячий врезной входной глиняный дактилоскопический дверной инфракрасный кандальный капризный капсюльный коварный кодовый колесцовый кремнёвый лазерный логический лёгонький магнитный механический мудрёный навесный накидной незатейливый неподатливый никелированный нутряной одноразовый орудийный особый открытый папиллярный паращютный потайной противоугонный пудовый пушечный ржавый сверхнадёжный сейфовый сенсорный сложный сундучный тугой тяжёлый фитильный хилый хитрый хлипкий центральный цифровой электрический электромагнитный электронный";
 if ( base(-1,cst) && s(-1) )
 { l[i]=omo2; Z[63]++; if(dbg){print "Z63"}; continue };
 if ( base(-2,cst) &&
      Q(-1,"suw_any") && s(-2,-1) )
 { l[i]=omo2; Z[64]++; if(dbg){print "Z64"}; continue };
 if ( base(1,cst) && s(0) && Q(1,"isname") )
 { l[i]=omo2; Z[65]++; if(dbg){print "Z65"}; continue };
 if ( base(1,"быть стать являться") &&
       base(2,cst) && s(0,1) )
 { l[i]=omo2; Z[66]++; if(dbg){print "Z66"}; continue };

 cst="бандитов барона баронов боса брата вампира владетеля волшебника волщебникаш герцога герцогов господаря графа графства демона дракона епископа заклинателей зла змея клана князей князя колдуна колдуньи коннетабля королевства королевы королей короля лорда людоеда магистра магната матери милорда надежд надежды наместника некроманта отца отчаяния принца принцев принцессы родственников рыцарей рыцаря семейства семьи скэгов тролля ужасов феи фей феодала хана хранителей царицы царя чародея шевалье штурмом эрла эрцгерцога";
 if ( wf(1,4,cst) && s(0,wfn-1) && Qf(1,wfn-1,"pre_any souz_iili") )
 { l[i]=omo1; Z[67]++; if(dbg){print "Z67"}; continue };

 cst="автомата багажника безопасности винтовки ворот входа гермолюка двери дверцы домофона забрала зажигания застёжки казённика калитки камеры капота квартиры кейса клетки контейнера крышки люка мушкета орудия потрфеля пушки ремня ружья саквояжа сейфа сундучка украшения хода цепи цепочки чемодана шкафа шкафчика ящика рюкзака";
 if ( wf(1,5,cst) && s(0,wfn-1) && Qf(1,wfn-1,"souz_iili pre_any") )
 { l[i]=omo2; Z[68]++; if(dbg){print "Z68"}; continue };

 cst="выглядеть казаться оказаться показаться представлять";
 if ( q(-1,"nar_mest nar_napr") &&
       bf(1,3,cst) && s(-1,bfn-1) )
 { l[i]=omo1; Z[69]++; if(dbg){print "Z69"}; continue };

 cst="дворец дом особняк резиденция тюрьма";
 if ( sc(0,"-") && base(1,cst) )
 { l[i]=omo1; Z[70]++; if(dbg){print "Z70"}; continue };
 if ( sc(-1,"-") && base(-1,cst) )
 { l[i]=omo1; Z[71]++; if(dbg){print "Z71"}; continue };

 cst="защёлка молния";
 if ( sc(-1,"-") && base(-1,cst) )
 { l[i]=omo2; Z[72]++; if(dbg){print "Z72"}; continue };
 if ( sc(0,"-") && base(1,cst) )
 { l[i]=omo2; Z[73]++; if(dbg){print "Z73"}; continue };

 cst="баронстве верстах версте горах городе земле казну километрах километре княжестве лесу междумирье междуречье местности миле милях окрестности окрестностях округе провинции пустыне устье фильме";
 if ( w(1,"в") &&
       wf(2,5,cst) && s(0,wfn-1) && Qf(2,wfn-1,"souz_iili pre_any") )
 { l[i]=omo1; Z[74]++; if(dbg){print "Z74"}; continue };

 cst="ванной двери дверь доме камере клетке комнате люке панцире погребе прихожей пуд туалете хранилище ящике";
 if ( w(1,"в") &&
       wf(2,5,cst) && s(0,wfn-1) && Qf(2,wfn-1,"souz_iili pre_any") )
 { l[i]=omo2; Z[75]++; if(dbg){print "Z75"}; continue };

cst="берегу вершине востоке горе горизонте гравюре границе западе земле краю море небе озере острове песке пригорке реке севере скале туче холме холмике юге";
 if ( w(1,"на") &&
       wf(2,4,cst) && s(0,wfn-1) )
 { l[i]=omo1; Z[76]++; if(dbg){print "Z76"}; continue };
 if ( wb(-6,-1,"на") &&
       wb(wbn+1,-1,cst) && s(wbn,-1) && !(bf(1,5,"повесить") && s(0,bfn-1)) )
 { l[i]=omo1; Z[77]++; if(dbg){print "Z77"}; continue };

 cst="берега вершины горизонта горы границы земли края моря моста неба озера острова пригорка реки скалы тучи холмикы холмы";
 if ( w(1,"у возле") &&
       wf(2,4,cst) && s(0,wfn-1) )
 { l[i]=omo1; Z[78]++; if(dbg){print "Z78"}; continue };
 if ( wb(-6,-1,"у возле") &&
       wb(wbn+1,-1,cst) && s(wbn,-1) && !(bf(1,5,"повесить") && s(0,bfn-1)) )
 { l[i]=omo1; Z[79]++; if(dbg){print "Z79"}; continue };

 cst="ангар блок вагон ворота гараж дверца дверь защёлка калитка камера кандалы комната контейнер купе люк наручники рот роток рундук сундук тумбочка холодильник цепочка чемодан шкаф шкафчик ящик клетка сокровищница решётка пружина цепь уста";
 if ( w(1,"на") &&
       bf(2,5,cst) && s(0,bfn-1) && Qf(2,bfn-1,"souz_iili pre_any") )
 { l[i]=omo2; Z[80]++; if(dbg){print "Z80"}; continue };

 cst="берегу вершине востоку горе горизонту границе западу морю небу озеру острову пригорку реке северу скале туче холмику холму югу";
 if ( w(1,"к") &&
       w(2,cst) && s(0,1) )
 { l[i]=omo1; Z[81]++; if(dbg){print "Z81"}; continue };
 if ( wb(-6,-1,"к") &&
       wb(wbn+1,-1,cst) && s(wbn,-1) )
 { l[i]=omo1; Z[82]++; if(dbg){print "Z82"}; continue };

 if ( w(1,"веками вдали издали вдалеке") && s(0) )
 { l[i]=omo1; Z[83]++; if(dbg){print "Z83"}; continue };


 cst="башенка башня окно привидение слава стена";
 if ( w(1,"с со") &&
       bf(2,5,cst) && s(0,bfn-1) && Qf(2,bfn-1,"souz_iili pre_any") )
 { l[i]=omo1; Z[84]++; if(dbg){print "Z84"}; continue };

 cst="известняка иллюзий камней камня коробков мрамора палочек песка";
 if ( w(1,"из") &&
       wf(2,5,cst) && s(0,wfn-1) && Qf(2,wfn-1,"souz_iili pre_any") )
 { l[i]=omo1; Z[85]++; if(dbg){print "Z85"}; continue };

 cst="ключ код колёсико механизм набор пистон секрет скважина фиксатор шифр дверь ружья пистолета орудия мушкета";
 if ( w(1,"с со") &&
       bf(2,5,cst) && s(0,bfn-1) && Qf(2,bfn-1,"souz_iili pre_any") )
 { l[i]=omo2; Z[86]++; if(dbg){print "Z86"}; continue };
 if ( w(-2,"с со") &&
       w(-1,cst) && s(-20,-1) )
 { l[i]=omo2; Z[86]++; if(dbg){print "Z86"}; continue };

 if ( sc(0,"[XIV]+") &&
       w(1,"века веков") && s(0) )
 { l[i]=omo1; Z[87]++; if(dbg){print "Z87"}; continue };


 cst="агонизировать арендовать атаковать блистать брать будоражить ветшать вздрогнуть вздыматься взлететь взять возвести возводить возвышаться воздвигать воздвигаться воздвигнуть воздвигнуться вознестись возникать возникнуть возноситься восстанавливать восстановить выкупить вылепить выситься выстраивать выстроить гореть доламывать завещать задрожать зажечь заложить занимать занять заполонить запустить запылать затихать затихнуть захватить захватывать защитить защищать лепить летать маячить меблировать навестить наводнить наполнить наполниться наполнять наполняться обветшать облететь обложить обнести обносить обогнуть обойти оборонить оборонять оборудовать обшарить объявиться огибать ограбить ограждать окружать окружить опустеть осадить осаждать осенить основать основывать отапливать отвоевать отвоёвывать отстаивать отстоять отстраивать отстроить охранять охраняться оцепить оцеплять ощущать пасть перебудить перебудоражить пограбить поджечь подниматься подняться покидать покинуть полуразвалиться полуразорить полуразрушить порушить посетить построить править предавать предать приближаться принадлежать пылать разбудить разграбить разрушить раскатать раскатывать распологаться расположить распололожиться сгореть сжечь скрываться скрыться снести сносить создавать создать соорудить сооружать сооружаться срыть стереть строить строиться существовать удерживать укрепить усладить услаждать штурмовать поколебать называться называть срыть содержать";
 if ( sc(0,",") && q(1,"prq_any") && base(1,cst) && s(1) )
 { l[i]=omo1; Z[96]++; if(dbg){print "Z96"}; continue };
 if ( base(-1,cst) && s(-1) )
 { l[i]=omo1; Z[97]++; if(dbg){print "Z97"}; continue };
 if ( base(-3,cst) &&
       q(-2,"nar_mest") &&
        q(-1,"prl_edvi prl_mnvi mest_vi mest_3e") && s(-3,-1) )
 { l[i]=omo1; Z[98]++; if(dbg){print "Z98"}; continue };
 if ( base(-2,cst) &&
       q(-1,"nar_mest prl_edvi prl_mnvi mest_vi mest_3e qast") && s(-2,-1) )
 { l[i]=omo1; Z[99]++; if(dbg){print "Z99"}; continue };
 if ( base(-3,cst) &&
       q(-2,"nar_mest prl_edvi prl_mnvi mest_vi mest_3e qast") &&
        q(-1,"nar_mest prl_edvi prl_mnvi mest_vi qast") && s(-3,-1) )
 { l[i]=omo1; Z[99]++; if(dbg){print "Z99"}; continue };
 if ( bf(1,3,cst) && s(0,bfn-1) && Qf(1,bfn-1,"souz_iili pre_any") )
 { l[i]=omo1; Z[100]++; if(dbg){print "Z100"}; continue };

 cst="активировать вешать взламывать взломать воздвигать воздвигнуть врезать вскрывать вскрыть вспарывать вспороть вставить выбивать выбить вываливаться вывалиться выключать выключить выламывать вылетать вылететь выломать вырвать вырывать вышибить деактивировать заблокировать загреметь заедать зазвенеть заклинить закодировать закрывать закрываться закрыть заменить заменять замкнуть замыкать запереть запирать запрограммировать заржаветь заржавить заскрежетать заскрипеть застегнуть застёгивать захлопнуть захлопнуться захлопывать защёлкиваться защёлкнуть защёлкнуться звякнуть изготовить испортить клацать клацнуть ключ кодировать конфисковать лязгать лязгнуть маукать менять мяукнуть навесить навешивать налагать настроить нащупать нащупывать откидывать откинуть открывать открываться открыть открыться отлететь отмыкать отмычка отомкнуть отпереть отпирать отстрелить отшвырнуть отщёлкиваться ощупать ощупывать перекосить повесить погладить подаваться податься поддаваться поддаться покрутить поломать поменять привесить привешивать принести приносить провернуть провернуться проворачивать проворачиваться программировать проржаветь прострелить разблокировать разломать разломаться размыкать разомкнуть разработать разрезать раскодировать раскрываться расплавить расстегнуть расстёгивать резать сбивать сбить скрежетать скрежетнуть скрипеть скрипнуть сломать сломаться смазать смазывать сменить сорвать сработать срезать установить устоять хрустнуть щёлкать щёлкнуть пилить защёлкивать защёлкнуть сорвать срывать отцепить отцеплять";
 if ( sc(0,",") && q(1,"prq_any") && base(1,cst) && s(1) )
 { l[i]=omo2; Z[101]++; if(dbg){print "Z101"}; continue };
 if ( base(-1,cst) && s(-1) )
 { l[i]=omo2; Z[102]++; if(dbg){print "Z102"}; continue };
 if ( base(-3,cst) &&
       q(-2,"prl_edvi prl_mnvi mest_vi mest_3e qast") &&
        q(-1,"prl_edvi prl_mnvi mest_vi qast") && s(-3,-1) )
 { l[i]=omo2; Z[103]++; if(dbg){print "Z103"}; continue };
 if ( base(-2,cst) &&
       q(-1,"prl_edvi prl_mnvi mest_vi mest_3e qast") && s(-2,-1) )
 { l[i]=omo2; Z[103]++; if(dbg){print "Z103"}; continue };
 if ( bf(1,3,cst) && s(0,bfn-1) && Qf(1,bfn-1,"souz_iili pre_any") )
 { l[i]=omo2; Z[104]++; if(dbg){print "Z104"}; continue };


 cst="акрополь баронство башня город двор дворянство деревня деревушка дом домик замок земля казарма каземат княжество королевство кремль крепостца крепость море музей окрестность особняк парк подземелье принц резиденция сад тюрьма угодья фонтан храм церковь";
 if ( q(1,"souz_iili") &&
       base(2,cst) && s(0,1) )
 { l[i]=omo1; Z[88]++; if(dbg){print "Z88"}; continue };
 if ( q(-1,"souz_iili") &&
       base(-2,cst) && s(-2,-1) )
 { l[i]=omo1; Z[89]++; if(dbg){print "Z89"}; continue };
 if ( sc(-1,",") && base(-1,cst) )
 { l[i]=omo1; Z[90]++; if(dbg){print "Z90"}; continue };
 if ( sc(0,",") && base(1,cst) )
 { l[i]=omo1; Z[91]++; if(dbg){print "Z91"}; continue };

 cst="дверь ключ петля целочка цепь";
 if ( q(1,"souz_iili") &&
       base(2,cst) && s(0,1) )
 { l[i]=omo2; Z[92]++; if(dbg){print "Z92"}; continue };
 if ( q(-1,"souz_iili") &&
       base(-2,cst) && s(-2,-1) )
 { l[i]=omo2; Z[93]++; if(dbg){print "Z93"}; continue };
 if ( sc(-1,",") && base(-1,cst) )
 { l[i]=omo2; Z[94]++; if(dbg){print "Z94"}; continue };
 if ( sc(0,",") && base(1,cst) )
 { l[i]=omo2; Z[95]++; if(dbg){print "Z95"}; continue };

 if ( q(1,"isname") && s(0) )
 { l[i]=omo1; Z[105]++; if(dbg){print "Z105"}; continue };
 if ( w(1,"де дю фон ди да") &&
       q(2,"isname") && s(0,1) )
 { l[i]=omo1; Z[106]++; if(dbg){print "Z106"}; continue };
 if ( q(1,"pre_vi pre_ro pre_pr") &&
       q(2,"isname") && s(0,1) )
 { l[i]=omo1; Z[107]++; if(dbg){print "Z107"}; continue };
 if ( q(-1,"isname") && ( (s(-2,-1) && sv(-2,")"))||(sc(-2,",") && s(-1)) ) )
 { l[i]=omo1; Z[108]++; if(dbg){print "Z108"}; continue };
 if ( q(0,"isname") && s(-1) )
 { l[i]=omo1; Z[109]++; if(dbg){print "Z109"}; continue };

 }; delete wpos; book[b]=joinpat(l,sep,nf) };};                                ##_footer

};
