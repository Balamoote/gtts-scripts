Руководство по работе
Последняя версия файла тут: https://github.com/Balamoote/gtts-scripts
Последняя версия словаря тут: https://github.com/Balamoote/gtts-dic 

Все ниже уже описано в файлах README, но тут упор делается именно на использование скриптов.

ВНИМАНИЕ: обльшинство описанных ниже действия можно произвести с помощь "общего скрипта" ./all-in-one.sh. Он запускает почти все описанные ниже команды с помощью
набора ключей и сделан для облегления работы. Читайте документацию к нему.

0. Предполагается, что всё установлено, как нужно, в директории tools и там же лежат файл словаря TTS.lexx, и книга book.fb2, которую мы хотим обработать.

1. преобразуем TTS.lexx в tts.txt. Всё, что делает этот скрипт - это преобрабует символ ударения в одинарную кавычку.

	./lexx2txt.sh TTS.lexx

2. выполняем быструю проверку словаря

	./check-lexx.sh

Этот стрипт использует только текстовый файл tts.txt, а не не файл TTS.lexx, т.е. выполнение п. 1 обязательно.
В нормальном состоянии сообщений об ошибках нет. Если они есть, то будет выведен отчёт с указанием, где именно найдена ошибка.
Все конфликты и ошибки нужно устранить в tts.txt и снова запустить ./check-lexx.sh.

Запуск ./check-lexx.sh -a производит более полную проверку словаря на предмет двойных срабатываний шаблонов (может занять несколько минут). 
Запуск ./check-lexx.sh -f инудительно удалит папку scriptaux и заново создат в ней же служебные файлы для других скриптов. 

(2.1.) На этом этапе можно опционально получить "частный" словарь для book.fb2

	./check-lexx.sh book.fb2

создаст файл book.fb2.lexx, который будет содержать шаблоны только для тех слов, которые были найдены в book.fb2. Если далее планируется использование скрипта
./get-words.sh для проставления ударений в именах и названиях в книге, то это шаг можно пропустить.
ВНИМАНИЕ: если ваша цель - только получить "локальный" словарь, то все действия уже завершены. Берите файл book.fb2.lexx, переносите его на смартфон и импортируйте
его через настройки TTSLexx.

3. Этап проставления ударений в именах в книге и сбор неизвестных слов.
ВНИМАНИЕ: скрипт ./get-words.sh использует служебные файлы, созданные скриптом ./check-lexx.sh. При любых изменениях в tts.txt или TTS.lexx обязательно запускайте
скрипт ./check-lexx.sh, иначе эти изменения не будут учтены при обработке книги.

Запускаем ./get-words.sh

	./get-words.sh books.fb2 или при повторном заруске ./get-words.sh -gg books.fb2

скриптом ./get-words.sh создаются 2 файл с "подозреваемыми" новыми именами и новыми "обычными" словами. Эти списки содержат слова, которых нет в словарях.
Это файлы: 00..10_*.list. Более подробно чатайте в самом скрипте ./get-words.sh.

3.1. Файлы 00..03
Если в этих файлах из строки сделать "кавычный" или "простой" шаблон, то они после ./addnames.sh попадут сначала в файл gw_wordsin2lexx.list, а оттуда после команды
./add2lexx.sh в файл tts.txt. После каждой порции добавлений в tts.txt нужно запустить ./check-lexx.sh и устранить конфликты.
gw_wordsin2lexx.list автоматически удаляется при запуске ./add2lexx.sh или ./addnames.sh -a.

Пример: есть 2 строки в 00_wrd_newdic_nl_146.list

_гамбургерной=гамбургерной=g из нее делаем " гамбургерн"=" га'мбургерн" и получаем "кавычный" шаблон
_гипером=гипером=g из нее делаем гипером=ги'пером и получаем простой шаблон

т.е. а) если хотим получить шаблон, то в строке должны отсутствовать _ и =g и присутствовать ' (одинарная кавычка - обозначение ударения)

Подробнее см. комментарии в скрипте ./addnames.sh по уславиям обработки и кудат записывается результат.

3.2 если в строках в файле 01_nom_newsur_nl_5.list или 02_nom_newany_nl_30.list ТОЛЬКО ударение, то по команде ./addnames.sh такие строки перенесутся в файл namebase0.txt
_гигером=гигером=g из нее делаем _гигером=ги'гером=g

4. в файлах 03..10_*.list находятся словоформы, которые были обработаны шаблонами словаря lexx, и потенциально могут содержать имена.
Скрипт ./lookupnames.sh "строка" выведет список файлов, где есть это строка (кавычки не обязательны). Это полезно для понимания, что и и где встречается,
что уже в базах, что уже в словаре.

4.1. в файлах с элементом _si_ в имени найденного имени можно передвинуть ударение и поставить ударение на нужное место, и обязательно поставить в конце строки g

	_ангелов=а'нгелов= можно переделать в _ангелов=анге'лов=g

после команды ./addnames.sh эта строка попадет в nameoverride.txt и будет выведена из-под действия словаря lexx

4.2. в файлах с элементов _dq_ в имени для найденного имени можно передвинуть ударение и поставить ударение на нужное место, и обязательно поставить в конце строки латинскую g
ОДНАКО, это "кавычные" шаблоны и тут возможны конфликты, если "новое" ударение будет находиться ПОСЛЕ "старого". В этих файлах левая часть строки - это собственно шаблон, правая
 - найденное по нему слово в тексте.

Пример:

_барбари=барбари'сов= меняем на _барбари=барба'рисов=g - тут конфликта нет, ударение переехало вперед, ГЛАВНОЕ: ударение внутри поискового слова " барбари"

_ахн=а'хннаноториус= а тут будет конфликт, поэтому так: _ахн=аъхннаното'риус=g т.е. слово в тексте будет для движка gtts искажено из-за "ъ", но произноситься будет правильно.

ВАЖНО: скрипт автоматически переделывает "ь" и "ъ" ПОСЛЕ гласных, а также "ъ" в позиции "ъ=g", в коды подстрочных символов "ь"=\xcc\xa3 (точка под буквой),
"ъ"=\xcc\xa4 (две точки под буквой), чтобы уменьшить визуальные искажения текста. TTSlexx затем обрабатывает их для корректного произношения.

Если нужно исправить "нестандартную" коррекцию, то нужно после команды ./addnames найти в nameoverride.txt строку _ахъннаното'риус=ахъннаното'риус=g и удалить там "лишний" "ъ" ,т.е. должно быть

	_ахннаноториус=ах\xcc\xa4ннаното'риус=g

Таким образом скрипт будет срабатывать на эту словоформу, а словарь TTSlexx - нет. Точно также нужно поступать со словами с "ё" в этих файлах: должно быть 2 строки с и
без ё. Строку без ё (т.е. с "е" в той же позиции) добавлять вручную.

4.3. Скрипт ./get-words.sh моздаёт директорию nomo-book.fb2 для каждой книги, где находятся скрипты для обработки имён-омографов.

5. Если скрипт ./get-words.sh запустить в с ключом -ld :

	./get-words.sh book.fb2 -ld

то будет дополнительно создан "частный" словарь под эту книгу (если нет желания запускать ./get-words.sh, то идентичный словарь формирует ./check-lexx.sh book.fb2).
Словарь уже в формате lexx, его конвертация не требуется.

5.1 Есть возможность сделать можно сделать "объединенный частный словарь" на нескольких книг.
Для этого для каждой книги последовательно создаем свой частный словарь, а далее перемещаем их в все в отдельную пустую директорию. Из этой директории даем команду:

	cat *.lexx | sort -u > joint_dic.lexx

получившийся joint_dic.lexx можно использовать для прослушивания этих нескольких книг. 

(5.2) "Частные" словари по умолчанию содержат шаблоны с регулярными выражениями - это строки, начинающиеся с regex.
Если наблюдаются проблемы с производительность на частных словарях, то можно попробовать либо удалить все строки с regex вручную, либо в файлах ./check-lexx.sh и/или
./get-words.sh найти и закомментировать следующую строку:

	grep "regex" tts.txt >> booklexx.tmp			# Секция regex

т.е. сделать так

	#grep "regex" tts.txt >> booklexx.tmp			# Секция regex

6. Если в процессе этой работы был изменен файл tts.txt, либо в результате ручной правки, либо в результате команды ./add2lexx.sh, то нужно еще раз проверить словарь
(если этого еще не сделали)

	./check-lexx.sh

и устранить конфликты. При отсутствии ошибок и конфликтов (кроме 1 "стандартного") выполнить команду:

	./txt2lexx.sh

Эта команда создаст файл ttsin.lexx, который можно импортировать на смарте через свойства TTSLexx
Если нужно, то можно сразу указать своё имя файл словаря lexx:

	./txt2lexx.sh TTS-my-dictionary.lexx

В этом случае, вместо файла с названием ttsin.lexx будет создан файл словаря TTS-my-dictionary.lexx

7. Вот и вся базовая процедура.

8. Скрипт ./yofik.sh производит ёфикацию текста в однозначных случаях и формирует директорию jomo-book.fb2 с ё-омографами. Это самостоятельный скрипт и очень мало
ориентирован на gtts и ttslexx. Его можно запустить первым для первичноё ёфикации. Списки ё-омографов этого скрипта и ./momo.sh не совпадают.

9. Скрипт ./momo.sh находит омографы, частично их обрабатывает и создает директорию mano-book.fb2, где находятся скрипты для обработки омографов.

10. Скрипт ./stripper.sh может очистить всю книгу от служебных символов и/или ударений или только одно слово. Это удобно при исправлении ошибок обработки или перед
публикацией исправленной книги.

11. Скрипт ./omofix.sh является автоматической версией ./momo.sh, обрабатывает (пока) больше слов, но делает больше ошибок. Работа над ним приостановлена.

12. Если нужно сравнить 2 файла, до и после обработки, то можно использовать ./pasteur.sh для подготовки "пастеризованных" копий файлов: без ударений, служебных символов,
буквы "ё", со всем текстом переведенным в нижний регистр.

13. Скрипты ./get-sords.sh, ./momo.sh, yofik.sh проще всего запускать с ключом -gg, чтобы не заморачиваться. Например, ./momo.sh -gg book.fb2

14. Большинство скриптов делает бэкапы, будьте внимательны, чтобы не "затереть" часть своей работы при повторном запуске скрипта, когда он восстанавливает бэкап.

15. Для работы с дискретными скрпитами обработки омографов в папках mano-, nomo-, jomo- нужен редактор vim и плагины
    - https://github.com/inkarkat/vim-PatternsOnText
    - https://github.com/inkarkat/vim-ingo-library

16. Работа с дискретными скриптами.
    Варианты запуска указаны в шапке каждого скрипта, удобно в mc (Midnight Commander) включить быстрый просмотр на одной из панелей и запускать их в косоли. Варианты использовани:
    а) можно просто запустить и в vim выбрать вариант для каждого случая.
    б) можно "заменить все", указав номер варианта ./слова.sh 1 или ./слова.sh 2
    в) можно сделать замену только в конкретной строке: ./слова.sh 328 1 - вариант 1 только в строке 328
    г) можно сделат замену в диапазоне строк: ./слова.sh 300,1200 1 - вариант 1 для строк между 300 и 1200, включая эти строки
    е) можно делать комбинации, например: сначала выбрать вариант 1 только в строке или диапазоне строк, а затем для всего файла применить вариант 2

17. Если использовать mc (Midnight Commander), то п. б) можно ускорить, прописав в меню по F2 три команды (~/.config/mc/menu):

1       Apply 1
        bash "%f" 1

2       Apply 2
        bash "%f" 2

3       Apply 3
        bash "%f" 3

0       Apply 0
        bash "%f" 0

В этом случае можно делать однотивные изменения для одного омографа всего за 2 нажатия клавиш: F2 и затем цифра 1,2,3 или 0. Обратите внимание, что горячие клавиши в меню
НЕ должны совпадать в уже имеющимися там (1, 2, 3, 0 там уже могут быть заняты). В этом случае, либо переназначьте существующие горячие клавиши, либо выберите другие.

18. Наиболее свежая информация об использовании скриптов содержится в комментария внитри самих скриптов. Документация в отдельных файлах может быть устаревшей.
